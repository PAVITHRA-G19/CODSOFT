import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# loading dataset using pandas
df = pd.read_csv('movies.csv')

# Drop rows with missing values in 'Rating'
df = df.dropna(subset=['Rating'])

# Select relevant features
X = df[['Genre']]
y = df['Rating']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a pipeline to handle encoding and modeling
preprocessor = ColumnTransformer(
    transformers=[
        ('genre', OneHotEncoder(handle_unknown='ignore'), ['Genre'])
    ],
    remainder='passthrough'
)

model = Pipeline([
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)

print(f'Root Mean Squared Error (RMSE): {rmse}')
print(f'R-squared (R2): {r2}')

# Get user input for the genre
user_genre = input("Enter the genre: ")

# Use the trained model to predict the rating for the user-provided genre
new_data = pd.DataFrame({'Genre': [user_genre]})
predicted_rating = model.predict(new_data)
print(f'Predicted Rating for {user_genre} genre: {predicted_rating[0]}')
